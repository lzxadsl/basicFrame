<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	<!-- 自定义校验策略 -->
	<bean id="shiroCredentials" class="com.frame.shiro.realm.LimitRetryHashedMatcher">
		<property name="hashAlgorithmName" value="md5"/>
		<!-- 散列迭代次数，需要和生成密码时的意义 -->
		<property name="hashIterations" value="2"/>
		<!-- 表示是否存储散列后的密码为16进制，需要和生成密码时的一样，默认是base64 -->
		<property name="storedCredentialsHexEncoded" value="true"/>
	</bean>
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
	<bean id="myRealm" class="com.frame.shiro.realm.AuthorityRealm"> 
		<property name="credentialsMatcher" ref="shiroCredentials"/>
		<!-- 使用我们配置好多缓存策略 -->
		<property name="cachingEnabled" value="true"/>  
       <!--  <property name="authenticationCachingEnabled" value="true"/>  
        <property name="authenticationCacheName" value="authenticationCache"/>  --> 
        <property name="authorizationCachingEnabled" value="true"/>  
        <property name="authorizationCacheName" value="authorizationCache"/>
	</bean>
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	    <property name="realm" ref="myRealm"/> 
	    <!-- 注入缓存 --> 
	    <property name="cacheManager" ref="shiroCacheManager" />
	</bean>  
	<!-- 自定义url过滤接口 -->
	<bean id="chainDefinitionSectionMetaSource" class="com.frame.shiro.power.ChainDefinitionSectionMetaSource">  
	    <property name="filterChainDefinitions">  
	        <value>  
	             /forword/basic/*.htm=anon  
	             /shiro/*.htm=anon
	             /shiro/main.htm=authc
	        </value>  
	    </property> 
	</bean> 
	
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>  
	    <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
	    <property name="loginUrl" value="/shiro/login.htm"/>  
	    <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
	    <!-- <property name="successUrl" value="/system/main"/> -->  
	    <!-- 用户访问未对其授权的资源时,所显示的连接(没有权限) -->  
	    <property name="unauthorizedUrl" value="/shiro/login.htm"/>  
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
	    <!-- shiro连接约束配置,在这里使用自定义的动态获取资源类 -->  
    	<property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource"/>  
    	<!-- <property name="filterChainDefinitions">  
	        <value>  
	             /forword/basic/*.htm=anon  
	             /shiro/*.htm=anon
	             /shiro/main.htm=authc
	             /**=authc
	        </value>  
	    </property>  -->
	</bean>  
	 
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行,Shiro生命周期处理器 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	   
	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
	<!-- 配置以下两个bean即可实现此功能 -->  
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->  
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->  
	<!--   
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
	  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
	    <property name="securityManager" ref="securityManager"/>  
	  </bean>  
	-->
</beans>